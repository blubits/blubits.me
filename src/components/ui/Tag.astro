---
import { TAG_STYLES } from '@/constants/ui';
import { Icon } from 'astro-icon/components';

interface Props {
  variant?: 'solid' | 'glass' | 'subtle' | 'code';
  size?: 'sm' | 'md' | 'lg';
  radius?: 'primary' | 'secondary' | 'compact';
  background?: string; // For custom backgrounds on solid variant
  icon?: string;
  class?: string;
}

const {
  variant = 'solid',
  size = 'md',
  radius = 'primary',
  background,
  icon,
  class: className = '',
} = Astro.props;

// Function to determine if a color is light or dark
function getContrastColor(hexColor: string): string {
  // Remove # if present
  const hex = hexColor.replace('#', '');
  
  // Convert to RGB
  const r = parseInt(hex.substr(0, 2), 16);
  const g = parseInt(hex.substr(2, 2), 16);
  const b = parseInt(hex.substr(4, 2), 16);
  
  // Calculate luminance using the relative luminance formula
  const luminance = (0.299 * r + 0.587 * g + 0.114 * b) / 255;
  
  // Return black for light backgrounds, white for dark backgrounds
  return luminance > 0.5 ? '#000000' : '#ffffff';
}

// Determine text color for solid variant with custom background
const textColor = variant === 'solid' && background 
  ? getContrastColor(background)
  : undefined;

// Combine all tag styles, but exclude the default text color for solid variant when we have a custom background
const baseVariantStyles = [...TAG_STYLES.variant[variant]];
if (variant === 'solid' && background) {
  // Remove the default 'text-white' class from solid variant when using custom background
  const filteredStyles = baseVariantStyles.filter(style => style !== 'text-white');
  baseVariantStyles.splice(0, baseVariantStyles.length, ...filteredStyles);
}

const tagClasses = [
  ...TAG_STYLES.base,
  TAG_STYLES.radius[radius],
  TAG_STYLES.size[size],
  ...baseVariantStyles,
  className,
].filter(Boolean);

// Apply custom styles for solid variant
const customStyles = variant === 'solid' && background 
  ? { 
      backgroundColor: background,
      color: textColor
    } 
  : {};
---

<span
  class:list={tagClasses}
  style={customStyles}
>
  {icon && <Icon name={icon} class="w-4 h-4" />}
  <slot />
</span>